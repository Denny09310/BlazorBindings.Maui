// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using BlazorBindings.Maui.Elements;
using MC = Microsoft.Maui.Controls;
using MCM = Material.Components.Maui;
using Microsoft.AspNetCore.Components;
using Microsoft.Maui.Graphics;
using System.Threading.Tasks;

#pragma warning disable MBB001

namespace BlazorBindings.Maui.Elements.Material.Components
{
    public partial class MDProgressIndicator : BlazorBindings.Maui.Elements.SkiaSharp.SKCanvasView
    {
        static MDProgressIndicator()
        {
            RegisterAdditionalHandlers();
        }

        [Parameter] public Color ActiveIndicatorColor { get; set; }
        [Parameter] public float? AnimationDuration { get; set; }
        [Parameter] public Color BackgroundColour { get; set; }
        [Parameter] public MCM.ControlState? ControlState { get; set; }
        [Parameter] public MCM.IndicatorType? IndicatorType { get; set; }
        [Parameter] public float? Percent { get; set; }
        [Parameter] public EventCallback<float> PercentChanged { get; set; }

        public new MCM.ProgressIndicator NativeControl => (MCM.ProgressIndicator)((BindableObject)this).NativeControl;

        protected override MCM.ProgressIndicator CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(ActiveIndicatorColor):
                    if (!Equals(ActiveIndicatorColor, value))
                    {
                        ActiveIndicatorColor = (Color)value;
                        NativeControl.ActiveIndicatorColor = ActiveIndicatorColor;
                    }
                    break;
                case nameof(AnimationDuration):
                    if (!Equals(AnimationDuration, value))
                    {
                        AnimationDuration = (float?)value;
                        NativeControl.AnimationDuration = AnimationDuration ?? (float)MCM.ProgressIndicator.AnimationDurationProperty.DefaultValue;
                    }
                    break;
                case nameof(BackgroundColour):
                    if (!Equals(BackgroundColour, value))
                    {
                        BackgroundColour = (Color)value;
                        NativeControl.BackgroundColour = BackgroundColour;
                    }
                    break;
                case nameof(ControlState):
                    if (!Equals(ControlState, value))
                    {
                        ControlState = (MCM.ControlState?)value;
                        NativeControl.ControlState = ControlState ?? default;
                    }
                    break;
                case nameof(IndicatorType):
                    if (!Equals(IndicatorType, value))
                    {
                        IndicatorType = (MCM.IndicatorType?)value;
                        NativeControl.IndicatorType = IndicatorType ?? (MCM.IndicatorType)MCM.ProgressIndicator.IndicatorTypeProperty.DefaultValue;
                    }
                    break;
                case nameof(Percent):
                    if (!Equals(Percent, value))
                    {
                        Percent = (float?)value;
                        NativeControl.Percent = Percent ?? (float)MCM.ProgressIndicator.PercentProperty.DefaultValue;
                    }
                    break;
                case nameof(PercentChanged):
                    if (!Equals(PercentChanged, value))
                    {
                        void NativeControlPercentChanged(object sender, MCM.Core.ValueChangedEventArgs e)
                        {
                            var value = NativeControl.Percent;
                            Percent = value;
                            InvokeEventCallback(PercentChanged, value);
                        }

                        PercentChanged = (EventCallback<float>)value;
                        NativeControl.PercentChanged -= NativeControlPercentChanged;
                        NativeControl.PercentChanged += NativeControlPercentChanged;
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        static partial void RegisterAdditionalHandlers();
    }
}
