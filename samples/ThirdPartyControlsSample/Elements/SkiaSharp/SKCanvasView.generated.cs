// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using BlazorBindings.Maui.Elements;
using MC = Microsoft.Maui.Controls;
using Microsoft.AspNetCore.Components;
using SVMC = SkiaSharp.Views.Maui.Controls;
using System.Threading.Tasks;

#pragma warning disable MBB001

namespace BlazorBindings.Maui.Elements.SkiaSharp
{
    public partial class SKCanvasView : BlazorBindings.Maui.Elements.View
    {
        static SKCanvasView()
        {
            RegisterAdditionalHandlers();
        }

        [Parameter] public bool? EnableTouchEvents { get; set; }
        [Parameter] public bool? IgnorePixelScaling { get; set; }
        [Parameter] public EventCallback<global::SkiaSharp.Views.Maui.SKPaintSurfaceEventArgs> OnPaintSurface { get; set; }
        [Parameter] public EventCallback<global::SkiaSharp.Views.Maui.SKTouchEventArgs> OnTouch { get; set; }

        public new SVMC.SKCanvasView NativeControl => (SVMC.SKCanvasView)((BindableObject)this).NativeControl;

        protected override SVMC.SKCanvasView CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(EnableTouchEvents):
                    if (!Equals(EnableTouchEvents, value))
                    {
                        EnableTouchEvents = (bool?)value;
                        NativeControl.EnableTouchEvents = EnableTouchEvents ?? (bool)SVMC.SKCanvasView.EnableTouchEventsProperty.DefaultValue;
                    }
                    break;
                case nameof(IgnorePixelScaling):
                    if (!Equals(IgnorePixelScaling, value))
                    {
                        IgnorePixelScaling = (bool?)value;
                        NativeControl.IgnorePixelScaling = IgnorePixelScaling ?? (bool)SVMC.SKCanvasView.IgnorePixelScalingProperty.DefaultValue;
                    }
                    break;
                case nameof(OnPaintSurface):
                    if (!Equals(OnPaintSurface, value))
                    {
                        void NativeControlPaintSurface(object sender, global::SkiaSharp.Views.Maui.SKPaintSurfaceEventArgs e) => InvokeEventCallback(OnPaintSurface, e);

                        OnPaintSurface = (EventCallback<global::SkiaSharp.Views.Maui.SKPaintSurfaceEventArgs>)value;
                        NativeControl.PaintSurface -= NativeControlPaintSurface;
                        NativeControl.PaintSurface += NativeControlPaintSurface;
                    }
                    break;
                case nameof(OnTouch):
                    if (!Equals(OnTouch, value))
                    {
                        void NativeControlTouch(object sender, global::SkiaSharp.Views.Maui.SKTouchEventArgs e) => InvokeEventCallback(OnTouch, e);

                        OnTouch = (EventCallback<global::SkiaSharp.Views.Maui.SKTouchEventArgs>)value;
                        NativeControl.Touch -= NativeControlTouch;
                        NativeControl.Touch += NativeControlTouch;
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        static partial void RegisterAdditionalHandlers();
    }
}
