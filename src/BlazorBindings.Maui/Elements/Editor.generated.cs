// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using MC = Microsoft.Maui.Controls;
using Microsoft.AspNetCore.Components;
using Microsoft.Maui;
using System;
using System.Threading.Tasks;

#pragma warning disable MBB001

namespace BlazorBindings.Maui.Elements
{
    /// <summary>
    /// A control that can edit multiple lines of text.
    /// </summary>
    public partial class Editor : InputView
    {
        static Editor()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or sets a value that controls whether the editor will change size to accommodate input as the user enters it.
        /// </summary>
        /// <value>
        /// Whether the editor will change size to accommodate input as the user enters it.
        /// </value>
        [Parameter] public MC.EditorAutoSizeOption? AutoSize { get; set; }
        [Parameter] public TextAlignment? HorizontalTextAlignment { get; set; }
        [Parameter] public TextAlignment? VerticalTextAlignment { get; set; }
        [Parameter] public EventCallback OnCompleted { get; set; }

        public new MC.Editor NativeControl => (MC.Editor)((BindableObject)this).NativeControl;

        protected override MC.Editor CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(AutoSize):
                    if (!Equals(AutoSize, value))
                    {
                        AutoSize = (MC.EditorAutoSizeOption?)value;
                        NativeControl.AutoSize = AutoSize ?? (MC.EditorAutoSizeOption)MC.Editor.AutoSizeProperty.DefaultValue;
                    }
                    break;
                case nameof(HorizontalTextAlignment):
                    if (!Equals(HorizontalTextAlignment, value))
                    {
                        HorizontalTextAlignment = (TextAlignment?)value;
                        NativeControl.HorizontalTextAlignment = HorizontalTextAlignment ?? (TextAlignment)MC.Editor.HorizontalTextAlignmentProperty.DefaultValue;
                    }
                    break;
                case nameof(VerticalTextAlignment):
                    if (!Equals(VerticalTextAlignment, value))
                    {
                        VerticalTextAlignment = (TextAlignment?)value;
                        NativeControl.VerticalTextAlignment = VerticalTextAlignment ?? (TextAlignment)MC.Editor.VerticalTextAlignmentProperty.DefaultValue;
                    }
                    break;
                case nameof(OnCompleted):
                    if (!Equals(OnCompleted, value))
                    {
                        void NativeControlCompleted(object sender, EventArgs e) => InvokeEventCallback(OnCompleted);

                        OnCompleted = (EventCallback)value;
                        NativeControl.Completed -= NativeControlCompleted;
                        NativeControl.Completed += NativeControlCompleted;
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        static partial void RegisterAdditionalHandlers();
    }
}
