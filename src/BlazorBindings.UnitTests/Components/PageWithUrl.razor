@implements IDisposable
@page "/test/path/{Title}"
@page "/test/path/{Title}/subpath"
@page "/test/int-route/{I:int}/subpath"
@page "/test/nullable-long-route/{L:long?}"
@page "/test/datetime/{Dt}/without-constraint"

<ContentPage @ref="_page" Title="@Title">
    <VerticalStackLayout>
        <Label Text="@I.ToString()" />
        <Label Text="@L?.ToString()" />
        <Label Text="@Dt?.ToString()" />

        <Label Text="@string.Concat(AdditionalText)" />

        <NonPageContent />
    </VerticalStackLayout>
</ContentPage>

@code {
    ContentPage _page;

    [Parameter] public string Title { get; set; }
    [Parameter] public int I { get; set; }
    [Parameter] public long? L { get; set; }
    [Parameter] public DateTime? Dt { get; set; }
    [Parameter] public string[] AdditionalText { get; set; } = Array.Empty<string>();

    public event Action OnDispose;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            // This is needed to be able to get component from tests.
            _page.NativeControl.SetValue(TestProperties.ComponentProperty, this);
        }
    }

    public void Dispose()
    {
        OnDispose?.Invoke();
        OnDispose = null;
    }

    public static void ValidateContent(MC.Element content, int i = 0, long? l = null, DateTime? dt = null, string[] additionalLines = null)
    {
        var contentPage = content as MC.ContentPage;
        Assert.That(contentPage, Is.Not.Null);

        var layout = (MC.VerticalStackLayout)contentPage.Content;
        var labelI = (MC.Label)layout[0];
        var labelL = (MC.Label)layout[1];
        var labelDt = (MC.Label)layout[2];
        var labelAdditional = (MC.Label)layout[3];

        Assert.That(labelI.Text, Is.EqualTo(i.ToString()));
        Assert.That(labelL.Text, Is.EqualTo(l?.ToString()));
        Assert.That(labelDt.Text, Is.EqualTo(dt?.ToString()));

        if (additionalLines != null)
            Assert.That(labelAdditional.Text, Is.EqualTo(string.Concat(additionalLines)));

        var nonPageContent = layout[4];
        NonPageContent.ValidateContent(nonPageContent);
    }
}